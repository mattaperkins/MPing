#!/usr/bin/env python3
# MPing - Matt Perkins 18 June 2025 - 
# A program to print a pretty with ping and optional bell with very little overhead. 
# Should work on most xterm 



#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# Version 1.01 

VERSION = "1.01" 

import subprocess
import re
import time
import shutil
import sys
import socket
import platform

# Unicode block characters (U+2581 to U+2588)
block_chars = [
    '\u2581', '\u2582', '\u2583', '\u2584',
    '\u2585', '\u2586', '\u2587', '\u2588'
]

# ANSI colour codes
RED = '\033[91m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
RESET = '\033[0m'

def print_help():
    print(f"MPing - Matt Perkins Version {VERSION}")
    print("Usage: mping [options] <host_or_ip>\n")
    print("Options:")
    print("  -h, --help       Show this help message and exit.")
    print("  -s, --silent     Suppress terminal bell (no audible ping).")
    print("  -v, --version    Show Version.")
    sys.exit(0)

def get_latency(host):
    system = platform.system()
    
    if system == "Linux":
        ping_cmd = ["ping", "-c", "1", "-W", "1", host]
    elif system == "Darwin":
        ping_cmd = ["ping", "-c", "1", "-t", "1", host]
    else:
        print(f"{RED}Unsupported OS: {system}{RESET}")
        sys.exit(3)

    try:
        output = subprocess.check_output(
            ping_cmd,
            stderr=subprocess.DEVNULL,
            universal_newlines=True
        )
        match = re.search(r'time=(\d+\.\d+)', output)
        if match:
            return float(match.group(1))
    except subprocess.CalledProcessError:
        return None
    return None

def check_host_resolvable(host):
    try:
        socket.gethostbyname(host)
        return True
    except socket.gaierror:
        return False

def determine_scale(host, pings=3, fallback=300.0):
    latencies = []
    print(f"MPing - Matt Perkins Version {VERSION}") 
    print(f"Probing {host} to determine scale...")
    for _ in range(pings):
        latency = get_latency(host)
        if latency is not None:
            latencies.append(latency)
        else:
            print("  Timeout or unreachable.")
        time.sleep(0.5)

    if latencies:
        max_rtt = max(latencies)
        scale = max_rtt * 1.5
        print(f"  Using dynamic scale: max RTT {max_rtt:.1f}ms → scale {scale:.1f}ms\n")
        return scale
    else:
        print(f"  All initial pings failed. Falling back to {fallback}ms scale.\n")
        return fallback

def latency_to_block(latency_ms, scale_max):
    if latency_ms is None:
        return None
    index = min(int((latency_ms / scale_max) * len(block_chars)), len(block_chars) - 1)
    return block_chars[index]

def colourise_block(char, latency, scale_max):
    if latency is None:
        return f"{RED}{char}{RESET}"
    elif latency > scale_max:
        return f"{YELLOW}{char}{RESET}"
    else:
        return f"{GREEN}{char}{RESET}"

def print_key(scale_max):
    print("Latency Graph Key:")
    print(f"  {GREEN}■{RESET} = latency OK (< {scale_max:.0f}ms)")
    print(f"  {YELLOW}■{RESET} = slow (> {scale_max:.0f}ms)")
    print(f"  {RED}■{RESET} = timeout / unreachable\n")

def parse_args():
    host = None
    silent = False
    args = sys.argv[1:]

    if not args:
        print_help()

    for arg in args:
        if arg in ('-h', '--help'):
            print_help()
        elif arg in ('-s', '--silent'):
            silent = True
        elif arg in ('-v', '--version'):
            print(f"MPing - Matt Perkins Version {VERSION}")
            sys.exit(0)
        elif not arg.startswith('-'):
            host = arg
        else:
            print(f"{RED}Unknown option:{RESET} {arg}")
            print_help()

    if not host:
        print(f"{RED}Error:{RESET} No host or IP provided.\n")
        print_help()

    return host, silent

def main():
    host, silent = parse_args()

    if not check_host_resolvable(host):
        print(f"{RED}Error:{RESET} Host '{host}' not found.")
        sys.exit(2)

    scale_max = determine_scale(host)
    term_width = shutil.get_terminal_size().columns
    graph_width = max(10, term_width - 38)  # Leave room for jitter/loss display

    visible_history = []
    coloured_history = []
    last_valid_char = block_chars[0]

    jitter = 0.0
    prev_latency = None
    total_pings = 0
    loss_count = 0

    print_key(scale_max)
    print(f"Pinging {host}... Press Ctrl+C to stop\n")

    try:
        while True:
            latency = get_latency(host)
            if latency is not None and not silent:
                print('\a', end='', flush=True)

            total_pings += 1
            if latency is None:
                loss_count += 1
                block = last_valid_char
                coloured = colourise_block(block, None, scale_max)
            else:
                block = latency_to_block(latency, scale_max)
                coloured = colourise_block(block, latency, scale_max)
                last_valid_char = block
                if prev_latency is not None:
                    jitter = abs(latency - prev_latency)
                prev_latency = latency

            visible_history.append(block)
            coloured_history.append(coloured)

            if len(visible_history) > graph_width:
                visible_history.pop(0)
                coloured_history.pop(0)

            coloured_bar = ''.join(coloured_history)
            latency_display = f"{latency:.1f}ms" if latency is not None else "timeout"
            jitter_display = f"jitter: {jitter:.1f}ms"
            loss_percent = (loss_count / total_pings) * 100
            loss_display = f"loss: {loss_percent:.0f}%"

            print(f"\r{coloured_bar} {latency_display:<8}  {jitter_display:<14} {loss_display:<8}", end='', flush=True)
            time.sleep(1)

    except KeyboardInterrupt:
        print("\nStopped.")

if __name__ == "__main__":
    main()

